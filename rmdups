#!/usr/bin/env bash

tmp=$(mktemp -d)
trap "rm -Rf ${tmp}" EXIT
echo "Using tmp dir ${tmp}"

dryrun="false"

while getopts ":d" opt; do
	case $opt in
		d)
			dryrun="true"
			;;
		\?)
			echo "Invalid option: $opt" >&2
			exit 1
			;;
	esac
done
shift $(( OPTIND - 1 ))

master=$1; shift
master_md5s="${tmp}/master.md5s"
dup_md5s="${tmp}/dups.md5s"
dup_count=0
rm_count=0
uniq_count=0

function makeHashes() {
	local path=$1
	local stdout=$2
	[[ -e "${path}" ]] || { echo "Directory ${path} doesn't exist" && exit 1 ; }
	local abs_path=$(readlink -e "$path") || { echo "Failed to readlink ${path}" && exit 1 ; }
	echo "${abs_path}" >> ${tmp}/abs_paths

	echo "000"
	cat ${tmp}/abs_paths
	echo "---"

	[[ $(grep "${abs_path}" ${tmp}/abs_paths | wc -l) == 1 ]] || { echo "Master path and duplicate(s) path are the same!" && exit 1; }

	echo "Generating hashes for ${path} into ${stdout}"
	which parallel &>/dev/null || { echo "Failed to find gnu parallel on PATH, is it installed??" && exit 1 ; }
	which md5sum &>/dev/null && 
		find "${path}" -type f | parallel --jobs +2 --eta md5sum {} 1> "${stdout}" 2>/dev/null ||
		find "${path}" -type f | parallel --jobs +2 --eta md5 -r {} 1> "${stdout}" 2>/dev/null
	[[ $(cat "${stdout}" | wc -l) -gt 0 ]] || { echo "Created no hashes, aborting, this doesn't seem right" && exit 1 ; }		
	echo "Total files in '${path}' == $(cat "${stdout}" | wc -l)"
}
function duplicate() {	
	let dup_count+=1
	echo "dry run == ${dryrun}"
	if [[ "${dryrun}" == "false" ]]; then let rm_count+=1 && rm "$1"; fi		
}
function unqiue() {	let uniq_count+=1; }

makeHashes "${master}" "${master_md5s}" || exit 1

while (( "$#" )); do
	duplicates=$1; shift	
	makeHashes "${duplicates}" "${dup_md5s}" || exit 1
	
	while read i; do 
		hash="$(echo "$i" | cut -d ' ' -f 1)"
		file="$(echo "$i" | sed -e "s/${hash}[[:space:]]*//")"
		grep "${hash}" "${master_md5s}" &>/dev/null && duplicate "${file}" || unqiue "${file}"
	done < "${dup_md5s}"
done

msg="Total files processed = $[dup_count + uniq_count], duplicates = ${dup_count}, unique files = ${uniq_count}, removed = ${rm_count}"
[[ "${dryrun}" == "true" ]] && msg="${msg} (dry run)"
echo "${msg}"

